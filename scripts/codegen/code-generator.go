package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"os"
	"sort"
	"strings"
)

func generateCode(tplName string, data interface{}, dstPath string) error {
	// Generate code
	b := bytes.NewBuffer(nil)
	err := templates[tplName].Execute(b, data)
	if err != nil {
		return err
	}

	// Format code
	code, err := format.Source(b.Bytes())
	if err != nil {
		return err
	}

	// Save to file
	return ioutil.WriteFile(dstPath, code, os.ModePerm)
}

func generateLocaleDataCode(data LocaleData, dstPath string) error {
	// Generate code
	b := bytes.NewBuffer(nil)
	b.WriteString(`
	// Code is generated by script; DO NOT EDIT.

	package data
	import "regexp"
	`)

	// Generate locale data
	err := templates["locale-data"].Execute(b, &data)
	if err != nil {
		return err
	}

	// Generate sublocale data
	var sublocaleList []LocaleData
	for _, locale := range data.LocaleSpecific {
		sublocaleList = append(sublocaleList, locale)
	}

	sort.Slice(sublocaleList, func(i, j int) bool {
		nameI := strings.ToLower(sublocaleList[i].Name)
		nameJ := strings.ToLower(sublocaleList[j].Name)
		return nameI < nameJ
	})

	for _, locale := range sublocaleList {
		err = templates["locale-data"].Execute(b, &locale)
		if err != nil {
			return err
		}
	}

	// Format code
	code, err := format.Source(b.Bytes())
	if err != nil {
		return err
	}

	// Remove empty fields
	code = rxGoEmptyField.ReplaceAll(code, []byte(""))
	code = rxGoZeroField.ReplaceAll(code, []byte(""))

	nRegex := bytes.Count(code, []byte("regexp"))
	if nRegex <= 1 {
		code = rxGoRegexImport.ReplaceAll(code, []byte(""))
	}

	// Save to file
	return ioutil.WriteFile(dstPath, code, os.ModePerm)
}
