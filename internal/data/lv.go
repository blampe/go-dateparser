// Code is generated by script; DO NOT EDIT.

package data

import "regexp"

var lv_Locale = LocaleData{
	Name:                  "lv",
	DateOrder:             "DMY",
	January:               []string{"janv", "janvāris"},
	February:              []string{"febr", "februāris"},
	March:                 []string{"marts"},
	April:                 []string{"apr", "aprīlis"},
	May:                   []string{"maijs"},
	June:                  []string{"jūn", "jūnijs"},
	July:                  []string{"jūl", "jūlijs"},
	August:                []string{"aug", "augusts"},
	September:             []string{"sept", "septembris"},
	October:               []string{"okt", "oktobris"},
	November:              []string{"nov", "novembris"},
	December:              []string{"dec", "decembris"},
	Monday:                []string{"pirmd", "pirmdiena"},
	Tuesday:               []string{"otrd", "otrdiena"},
	Wednesday:             []string{"trešd", "trešdiena"},
	Thursday:              []string{"ceturtd", "ceturtdiena"},
	Friday:                []string{"piektd", "piektdiena"},
	Saturday:              []string{"sestd", "sestdiena"},
	Sunday:                []string{"svētd", "svētdiena"},
	AM:                    []string{"priekšp", "priekšpusdiena", "priekšpusdienā"},
	PM:                    []string{"pēcp", "pēcpusd", "pēcpusdiena", "pēcpusdienā"},
	Year:                  []string{"g", "gads"},
	Month:                 []string{"mēn", "mēnesis"},
	Week:                  []string{"ned", "nedēļa"},
	Day:                   []string{"d", "diena"},
	Hour:                  []string{"h", "st", "stundas"},
	Minute:                []string{"min", "minūtes"},
	Second:                []string{"s", "sek", "sekundes"},
	RelativeType: map[string][]string{
		`0 day ago`:    {`šodien`},
		`0 hour ago`:   {`šajā stundā`},
		`0 minute ago`: {`šajā minūtē`},
		`0 month ago`:  {`šajā mēnesī`},
		`0 second ago`: {`tagad`},
		`0 week ago`:   {`šajā nedēļā`},
		`0 year ago`:   {`šajā gadā`},
		`1 day ago`:    {`vakar`},
		`1 month ago`:  {`pagājušajā mēnesī`},
		`1 week ago`:   {`pagājušajā nedēļā`},
		`1 year ago`:   {`pagājušajā gadā`},
		`in 1 day`:     {`rīt`},
		`in 1 month`:   {`nākamajā mēnesī`},
		`in 1 week`:    {`nākamajā nedēļā`},
		`in 1 year`:    {`nākamajā gadā`},
	},
	RelativeTypeRegex: map[string][]*regexp.Regexp{
		`\1 day ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) d`),
			regexp.MustCompile(`(?i)pirms (\d+) dienas`),
			regexp.MustCompile(`(?i)pirms (\d+) dienām`),
		},
		`\1 hour ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) h`),
			regexp.MustCompile(`(?i)pirms (\d+) st`),
			regexp.MustCompile(`(?i)pirms (\d+) stundas`),
			regexp.MustCompile(`(?i)pirms (\d+) stundām`),
		},
		`\1 minute ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) min`),
			regexp.MustCompile(`(?i)pirms (\d+) minūtes`),
			regexp.MustCompile(`(?i)pirms (\d+) minūtēm`),
		},
		`\1 month ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) mēn`),
			regexp.MustCompile(`(?i)pirms (\d+) mēneša`),
			regexp.MustCompile(`(?i)pirms (\d+) mēnešiem`),
		},
		`\1 second ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) s`),
			regexp.MustCompile(`(?i)pirms (\d+) sek`),
			regexp.MustCompile(`(?i)pirms (\d+) sekundes`),
			regexp.MustCompile(`(?i)pirms (\d+) sekundēm`),
		},
		`\1 week ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) ned`),
			regexp.MustCompile(`(?i)pirms (\d+) nedēļas`),
			regexp.MustCompile(`(?i)pirms (\d+) nedēļām`),
		},
		`\1 year ago`: {
			regexp.MustCompile(`(?i)pirms (\d+) g`),
			regexp.MustCompile(`(?i)pirms (\d+) gada`),
			regexp.MustCompile(`(?i)pirms (\d+) gadiem`),
		},
		`in \1 day`: {
			regexp.MustCompile(`(?i)pēc (\d+) d`),
			regexp.MustCompile(`(?i)pēc (\d+) dienas`),
			regexp.MustCompile(`(?i)pēc (\d+) dienām`),
		},
		`in \1 hour`: {
			regexp.MustCompile(`(?i)pēc (\d+) h`),
			regexp.MustCompile(`(?i)pēc (\d+) st`),
			regexp.MustCompile(`(?i)pēc (\d+) stundas`),
			regexp.MustCompile(`(?i)pēc (\d+) stundām`),
		},
		`in \1 minute`: {
			regexp.MustCompile(`(?i)pēc (\d+) min`),
			regexp.MustCompile(`(?i)pēc (\d+) minūtes`),
			regexp.MustCompile(`(?i)pēc (\d+) minūtēm`),
		},
		`in \1 month`: {
			regexp.MustCompile(`(?i)pēc (\d+) mēn`),
			regexp.MustCompile(`(?i)pēc (\d+) mēneša`),
			regexp.MustCompile(`(?i)pēc (\d+) mēnešiem`),
		},
		`in \1 second`: {
			regexp.MustCompile(`(?i)pēc (\d+) s`),
			regexp.MustCompile(`(?i)pēc (\d+) sek`),
			regexp.MustCompile(`(?i)pēc (\d+) sekundes`),
			regexp.MustCompile(`(?i)pēc (\d+) sekundēm`),
		},
		`in \1 week`: {
			regexp.MustCompile(`(?i)pēc (\d+) ned`),
			regexp.MustCompile(`(?i)pēc (\d+) nedēļas`),
			regexp.MustCompile(`(?i)pēc (\d+) nedēļām`),
		},
		`in \1 year`: {
			regexp.MustCompile(`(?i)pēc (\d+) g`),
			regexp.MustCompile(`(?i)pēc (\d+) gada`),
			regexp.MustCompile(`(?i)pēc (\d+) gadiem`),
		},
	},
}
