package main

import "text/template"

var tpl = template.Must(template.New("").Parse(codeTemplate))

const codeTemplate = `
// Code is generated by script; DO NOT EDIT.

package digit

import (
	"unicode"
)

type RangeData struct {
	Start rune
	End   rune
}

func NormalizeString(str string) string {
	lastUsedRange := -1

	runes := []rune(str)
	for i, r := range runes {
		if !unicode.IsDigit(r) {
			continue
		}

		if lastUsedRange > 0 {
			if number, ok := Ranges[lastUsedRange].apply(r); ok {
				runes[i] = number
			}
		}

		for j := range Ranges {
			if number, ok := Ranges[j].apply(r); ok {
				runes[i] = number
			}
		}
	}

	return string(runes)
}

func (dr RangeData) apply(r rune) (rune, bool) {
	if r >= dr.Start && r <= dr.End {
		number := int32(r - dr.Start)
		return '\U00000030' + number, true
	}

	return r, false
}

var Ranges = []RangeData{
	{{range $data := . -}}
	{'{{$data.Start}}', '{{$data.End}}'}, // {{$data.Name}}
	{{end -}}
}
`
