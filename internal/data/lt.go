package data

import "regexp"

var ltLocale = LocaleData{
	Name:                  "lt",
	DateOrder:             "YMD",
	January:               []string{"saus", "sausio", "sausis"},
	February:              []string{"vas", "vasario", "vasaris"},
	March:                 []string{"kov", "kovas", "kovo"},
	April:                 []string{"bal", "balandis", "balandžio"},
	May:                   []string{"geg", "gegužė", "gegužės"},
	June:                  []string{"birž", "birželio", "birželis"},
	July:                  []string{"liep", "liepa", "liepos"},
	August:                []string{"rugp", "rugpjūtis", "rugpjūčio"},
	September:             []string{"rugs", "rugsėjis", "rugsėjo"},
	October:               []string{"spal", "spalio", "spalis"},
	November:              []string{"lapkr", "lapkritis", "lapkričio"},
	December:              []string{"gruod", "gruodis", "gruodžio"},
	Monday:                []string{"pirmadienis", "pr"},
	Tuesday:               []string{"an", "antradienis"},
	Wednesday:             []string{"tr", "trečiadienis"},
	Thursday:              []string{"ketvirtadienis", "kt"},
	Friday:                []string{"penktadienis", "pn"},
	Saturday:              []string{"šeštadienis", "št"},
	Sunday:                []string{"sekmadienis", "sk"},
	AM:                    []string{"priešpiet"},
	PM:                    []string{"popiet"},
	Year:                  []string{"m", "metai"},
	Month:                 []string{"mėn", "mėnuo"},
	Week:                  []string{"sav", "savaitė"},
	Day:                   []string{"d", "diena"},
	Hour:                  []string{"h", "val", "valanda"},
	Minute:                []string{"min", "minutė"},
	Second:                []string{"s", "sek", "sekundė"},
	RelativeType: map[string][]string{
		`0 day ago`:    {`šiandien`},
		`0 hour ago`:   {`šią valandą`},
		`0 minute ago`: {`šią minutę`},
		`0 month ago`:  {`šį mėnesį`},
		`0 second ago`: {`dabar`},
		`0 week ago`:   {`šią savaitę`},
		`0 year ago`:   {`šiais metais`},
		`1 day ago`:    {`vakar`},
		`1 month ago`:  {`praėjusį mėnesį`},
		`1 week ago`:   {`praėjusią savaitę`},
		`1 year ago`:   {`praėjusiais metais`},
		`in 1 day`:     {`rytoj`},
		`in 1 month`:   {`kitą mėnesį`},
		`in 1 week`:    {`kitą savaitę`},
		`in 1 year`:    {`kitais metais`},
	},
	RelativeTypeRegex: map[string][]*regexp.Regexp{
		`\1 day ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) d`),
			regexp.MustCompile(`(?i)prieš (\d+) dieną`),
			regexp.MustCompile(`(?i)prieš (\d+) dienų`),
		},
		`\1 hour ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) val`),
			regexp.MustCompile(`(?i)prieš (\d+) valandą`),
			regexp.MustCompile(`(?i)prieš (\d+) valandų`),
		},
		`\1 minute ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) min`),
			regexp.MustCompile(`(?i)prieš (\d+) minutę`),
			regexp.MustCompile(`(?i)prieš (\d+) minučių`),
		},
		`\1 month ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) mėn`),
			regexp.MustCompile(`(?i)prieš (\d+) mėnesių`),
			regexp.MustCompile(`(?i)prieš (\d+) mėnesį`),
		},
		`\1 second ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) s`),
			regexp.MustCompile(`(?i)prieš (\d+) sek`),
			regexp.MustCompile(`(?i)prieš (\d+) sekundę`),
			regexp.MustCompile(`(?i)prieš (\d+) sekundžių`),
		},
		`\1 week ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) sav`),
			regexp.MustCompile(`(?i)prieš (\d+) savaitę`),
			regexp.MustCompile(`(?i)prieš (\d+) savaičių`),
		},
		`\1 year ago`: {
			regexp.MustCompile(`(?i)prieš (\d+) m`),
			regexp.MustCompile(`(?i)prieš (\d+) metus`),
			regexp.MustCompile(`(?i)prieš (\d+) metų`),
		},
		`in \1 day`: {
			regexp.MustCompile(`(?i)po (\d+) d`),
			regexp.MustCompile(`(?i)po (\d+) dienos`),
			regexp.MustCompile(`(?i)po (\d+) dienų`),
		},
		`in \1 hour`: {
			regexp.MustCompile(`(?i)po (\d+) val`),
			regexp.MustCompile(`(?i)po (\d+) valandos`),
			regexp.MustCompile(`(?i)po (\d+) valandų`),
		},
		`in \1 minute`: {
			regexp.MustCompile(`(?i)po (\d+) min`),
			regexp.MustCompile(`(?i)po (\d+) minutės`),
			regexp.MustCompile(`(?i)po (\d+) minučių`),
		},
		`in \1 month`: {
			regexp.MustCompile(`(?i)po (\d+) mėn`),
			regexp.MustCompile(`(?i)po (\d+) mėnesio`),
			regexp.MustCompile(`(?i)po (\d+) mėnesių`),
		},
		`in \1 second`: {
			regexp.MustCompile(`(?i)po (\d+) s`),
			regexp.MustCompile(`(?i)po (\d+) sek`),
			regexp.MustCompile(`(?i)po (\d+) sekundės`),
			regexp.MustCompile(`(?i)po (\d+) sekundžių`),
		},
		`in \1 week`: {
			regexp.MustCompile(`(?i)po (\d+) sav`),
			regexp.MustCompile(`(?i)po (\d+) savaitės`),
			regexp.MustCompile(`(?i)po (\d+) savaičių`),
		},
		`in \1 year`: {
			regexp.MustCompile(`(?i)po (\d+) m`),
			regexp.MustCompile(`(?i)po (\d+) metų`),
		},
	},
}
