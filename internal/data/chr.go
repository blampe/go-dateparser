// Code is generated by script; DO NOT EDIT.

package data

import "regexp"

var chr_Locale = LocaleData{
	Name:                  "chr",
	DateOrder:             "MDY",
	January:               []string{"ꭴꮓ", "ꭴꮓꮈꮤꮕ"},
	February:              []string{"ꭷꭶ", "ꭷꭶꮅ"},
	March:                 []string{"ꭰꮕ", "ꭰꮕᏹ"},
	April:                 []string{"ꭷꮼ", "ꭷꮼꮒ"},
	May:                   []string{"ꭰꮒ", "ꭰꮒꮝꭼꮨ"},
	June:                  []string{"ꮥꭽ", "ꮥꭽꮇᏹ"},
	July:                  []string{"ꭻᏸ", "ꭻᏸꮙꮒ"},
	August:                []string{"ꭶꮆ", "ꭶꮆꮒ"},
	September:             []string{"ꮪꮅ", "ꮪꮅꮝꮧ"},
	October:               []string{"ꮪꮒ", "ꮪꮒꮕꮧ"},
	November:              []string{"ꮕꮣ", "ꮕꮣꮥꮖ"},
	December:              []string{"ꭵꮝ", "ꭵꮝꭹᏹ"},
	Monday:                []string{"ꭴꮎꮩꮣꮙꮕꭿ", "ꮙꮕꭿ"},
	Tuesday:               []string{"ꮤꮅꮑ", "ꮤꮅꮑꭲꭶ"},
	Wednesday:             []string{"ꮶꭲꮑ", "ꮶꭲꮑꭲꭶ"},
	Thursday:              []string{"ꮕꭹꮑ", "ꮕꭹꮑꭲꭶ"},
	Friday:                []string{"ꮷꮎꭹ", "ꮷꮎꭹꮆꮝꮧ"},
	Saturday:              []string{"ꭴꮎꮩꮣꮘꮥꮎ", "ꮘꮥꮎ"},
	Sunday:                []string{"ꭴꮎꮩꮣꮖꮝꭼ", "ꮖꮝꭼ"},
	AM:                    []string{"ꮜꮎꮄ"},
	PM:                    []string{"ꮢꭿᏹꭲꮧꮲ"},
	Year:                  []string{"ꭴꮥ", "ꭴꮥꮨᏼꮜꮧꮢꭲ"},
	Month:                 []string{"ꭷꮈ", "ꭷꮈꭲ"},
	Week:                  []string{"ꮢꮎ", "ꮢꮎꮩꮣꮖꮝꮧ"},
	Day:                   []string{"ꭲꭶ"},
	Hour:                  []string{"ꮡꮯ", "ꮡꮯꮆꮣ"},
	Minute:                []string{"ꭲꮿꮤ", "ꭲꮿꮤꮼꮝꮤꮕ"},
	Second:                []string{"ꭰꮞꮲ"},
	RelativeType: map[string][]string{
		`0 day ago`:    {`ꭺꭿ ꭲꭶ`},
		`0 hour ago`:   {`ꭿꭰ ꮡꮯꮆꮣ`},
		`0 minute ago`: {`ꭿꭰ ꭲꮿꮤꮼꮝꮤꮕ`},
		`0 month ago`:  {`ꭿꭰ ꭷꮈꭲ`},
		`0 second ago`: {`ꮓꮚ`},
		`0 week ago`:   {`ꭿꭰ ꭰꮅꮅꮜ`},
		`0 year ago`:   {`ꭿꭰ ꮷꮥꮨᏼꮢꮨ`},
		`1 day ago`:    {`ꮢꭿ`},
		`1 month ago`:  {`ꭷꮈꭲ ꮵꭸꮢ`},
		`1 week ago`:   {`ꮵꮫꮅᏹꮅꮢꭲ`},
		`1 year ago`:   {`ꭱꮨ ꮵꭸꮢ`},
		`in 1 day`:     {`ꮜꮎꮄꭲ`},
		`in 1 month`:   {`ꮤꮅꮑ ꭷꮈꭲ`},
		`in 1 week`:    {`ꮠꮖꮄꮕꮂ`},
		`in 1 year`:    {`ꭱꮨᏼꭲ`},
	},
	RelativeTypeRegex: map[string][]*regexp.Regexp{
		`$1 day ago`: {
			regexp.MustCompile(`(?i)(\d+) ꭲꭶ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)(\d+) ꭿꮈꮝꭹ ꮷꮢꭿꮫ ꮵꭸꮢ`),
		},
		`$1 hour ago`: {
			regexp.MustCompile(`(?i)(\d+) ꭲᏻꮯꮆꮣ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)(\d+) ꮡꮯꮆꮣ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮡꮯ ꮵꭸꮢ`),
		},
		`$1 minute ago`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꮿꮤ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꮿꮤꮼꮝꮤꮕ ꮵꭸꮢ`),
		},
		`$1 month ago`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭷꮈ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭷꮈꭲ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮧꭷꮈꭲ ꮵꭸꮢ`),
		},
		`$1 second ago`: {
			regexp.MustCompile(`(?i)(\d+) ꭰꮞꮲ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)(\d+) ꮣꮣꮎꮹꮝꭼ ꮵꭸꮢ`),
		},
		`$1 week ago`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲᏻꮎꮩꮣꮖꮝꮧ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮢꮎ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮢꮎꮩꮣꮖꮝꮧ ꮵꭸꮢ`),
		},
		`$1 year ago`: {
			regexp.MustCompile(`(?i)(\d+) ꭲꮷꮥꮨᏼꮜꮧꮢꭲ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)(\d+) ꭴꮥꮨᏼꮜꮧꮢꭲ ꮵꭸꮢ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭴꮥ ꮵꭸꮢ`),
		},
		`in $1 day`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꭶ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭿꮈꮝꭹ ꮷꮢꭿꮫ`),
		},
		`in $1 hour`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲᏻꮯꮆꮣ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮡꮯ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮡꮯꮆꮣ`),
		},
		`in $1 minute`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꮿꮤ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꮿꮤꮼꮝꮤꮕ`),
		},
		`in $1 month`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭷꮈ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭷꮈꭲ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮧꭷꮈꭲ`),
		},
		`in $1 second`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭰꮞꮲ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮣꮣꮎꮹꮝꭼ ꮵꭸꮢ`),
		},
		`in $1 week`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲᏻꮎꮩꮣꮖꮝꮧ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮢꮎ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꮢꮎꮩꮣꮖꮝꮧ`),
		},
		`in $1 year`: {
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭲꮷꮥꮨᏼꮜꮧꮢꭲ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭴꮥ`),
			regexp.MustCompile(`(?i)ꮎꮏ (\d+) ꭴꮥꮨᏼꮜꮧꮢꭲ`),
		},
	},
}
