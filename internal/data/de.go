// Code is generated by script; DO NOT EDIT.

package data

import "regexp"

var de_Locale = LocaleData{
	Name:      "de",
	DateOrder: "DMY",
	SkipWords: []string{"'", ",", "-", ".", "/", ";", "@", "[", "]", "etwa", "uhr", "um", "und", "|"},
	Simplifications: map[*regexp.Regexp]string{
		regexp.MustCompile(`(\A|\W|_)acht(\z|\W|_)`):   "${1}8${2}",
		regexp.MustCompile(`(\A|\W|_)drei(\z|\W|_)`):   "${1}3${2}",
		regexp.MustCompile(`(\A|\W|_)ein(\z|\W|_)`):    "${1}1${2}",
		regexp.MustCompile(`(\A|\W|_)einem(\z|\W|_)`):  "${1}1${2}",
		regexp.MustCompile(`(\A|\W|_)einer(\z|\W|_)`):  "${1}1${2}",
		regexp.MustCompile(`(\A|\W|_)elf(\z|\W|_)`):    "${1}11${2}",
		regexp.MustCompile(`(\A|\W|_)fünf(\z|\W|_)`):   "${1}5${2}",
		regexp.MustCompile(`(\A|\W|_)neun(\z|\W|_)`):   "${1}9${2}",
		regexp.MustCompile(`(\A|\W|_)sechs(\z|\W|_)`):  "${1}6${2}",
		regexp.MustCompile(`(\A|\W|_)sieben(\z|\W|_)`): "${1}7${2}",
		regexp.MustCompile(`(\A|\W|_)vier(\z|\W|_)`):   "${1}4${2}",
		regexp.MustCompile(`(\A|\W|_)zehn(\z|\W|_)`):   "${1}10${2}",
		regexp.MustCompile(`(\A|\W|_)zwei(\z|\W|_)`):   "${1}2${2}",
		regexp.MustCompile(`(\A|\W|_)zwölf(\z|\W|_)`):  "${1}12${2}",
	},
	Translations: map[*regexp.Regexp]string{
		regexp.MustCompile(`(\A|\W|_)vor (\d+) tag(\z|\W|_)`):      "${1}$2 day ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) tagen(\z|\W|_)`):    "${1}$2 day ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) std(\z|\W|_)`):      "${1}$2 hour ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) stunde(\z|\W|_)`):   "${1}$2 hour ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) stunden(\z|\W|_)`):  "${1}$2 hour ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+)\s*h(\z|\W|_)`):      "${1}$2 hour ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+)\s*m(\z|\W|_)`):      "${1}$2 minute ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) monat(\z|\W|_)`):    "${1}$2 month ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) monaten(\z|\W|_)`):  "${1}$2 month ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) s(\z|\W|_)`):        "${1}$2 second ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) sek(\z|\W|_)`):      "${1}$2 second ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) sekunde(\z|\W|_)`):  "${1}$2 second ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) sekunden(\z|\W|_)`): "${1}$2 second ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+)\s*s(\z|\W|_)`):      "${1}$2 second ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) wo(\z|\W|_)`):       "${1}$2 week ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) woche(\z|\W|_)`):    "${1}$2 week ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) wochen(\z|\W|_)`):   "${1}$2 week ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) jahr(\z|\W|_)`):     "${1}$2 year ago${3}",
		regexp.MustCompile(`(\A|\W|_)vor (\d+) jahren(\z|\W|_)`):   "${1}$2 year ago${3}",
		regexp.MustCompile(`(\A|\W|_)heute(\z|\W|_)`):              "${1}0 day ago${2}",
		regexp.MustCompile(`(\A|\W|_)in dieser stunde(\z|\W|_)`):   "${1}0 hour ago${2}",
		regexp.MustCompile(`(\A|\W|_)in dieser minute(\z|\W|_)`):   "${1}0 minute ago${2}",
		regexp.MustCompile(`(\A|\W|_)diesen monat(\z|\W|_)`):       "${1}0 month ago${2}",
		regexp.MustCompile(`(\A|\W|_)jetzt(\z|\W|_)`):              "${1}0 second ago${2}",
		regexp.MustCompile(`(\A|\W|_)diese woche(\z|\W|_)`):        "${1}0 week ago${2}",
		regexp.MustCompile(`(\A|\W|_)dieses jahr(\z|\W|_)`):        "${1}0 year ago${2}",
		regexp.MustCompile(`(\A|\W|_)gestern(\z|\W|_)`):            "${1}1 day ago${2}",
		regexp.MustCompile(`(\A|\W|_)letzten monat(\z|\W|_)`):      "${1}1 month ago${2}",
		regexp.MustCompile(`(\A|\W|_)letzte woche(\z|\W|_)`):       "${1}1 week ago${2}",
		regexp.MustCompile(`(\A|\W|_)letztes jahr(\z|\W|_)`):       "${1}1 year ago${2}",
		regexp.MustCompile(`(\A|\W|_)vorgestern(\z|\W|_)`):         "${1}2 day ago${2}",
		regexp.MustCompile(`(\A|\W|_)vor(\z|\W|_)`):                "${1}ago${2}",
		regexp.MustCompile(`(\A|\W|_)vorm(\z|\W|_)`):               "${1}am${2}",
		regexp.MustCompile(`(\A|\W|_)apr(\z|\W|_)`):                "${1}april${2}",
		regexp.MustCompile(`(\A|\W|_)april(\z|\W|_)`):              "${1}april${2}",
		regexp.MustCompile(`(\A|\W|_)aug(\z|\W|_)`):                "${1}august${2}",
		regexp.MustCompile(`(\A|\W|_)august(\z|\W|_)`):             "${1}august${2}",
		regexp.MustCompile(`(\A|\W|_)tag(\z|\W|_)`):                "${1}day${2}",
		regexp.MustCompile(`(\A|\W|_)tage(\z|\W|_)`):               "${1}day${2}",
		regexp.MustCompile(`(\A|\W|_)tagen(\z|\W|_)`):              "${1}day${2}",
		regexp.MustCompile(`(\A|\W|_)dez(\z|\W|_)`):                "${1}december${2}",
		regexp.MustCompile(`(\A|\W|_)dezember(\z|\W|_)`):           "${1}december${2}",
		regexp.MustCompile(`(\A|\W|_)feb(\z|\W|_)`):                "${1}february${2}",
		regexp.MustCompile(`(\A|\W|_)feber(\z|\W|_)`):              "${1}february${2}",
		regexp.MustCompile(`(\A|\W|_)februar(\z|\W|_)`):            "${1}february${2}",
		regexp.MustCompile(`(\A|\W|_)fr(\z|\W|_)`):                 "${1}friday${2}",
		regexp.MustCompile(`(\A|\W|_)fre(\z|\W|_)`):                "${1}friday${2}",
		regexp.MustCompile(`(\A|\W|_)freitag(\z|\W|_)`):            "${1}friday${2}",
		regexp.MustCompile(`(\A|\W|_)std(\z|\W|_)`):                "${1}hour${2}",
		regexp.MustCompile(`(\A|\W|_)stunde(\z|\W|_)`):             "${1}hour${2}",
		regexp.MustCompile(`(\A|\W|_)stunden(\z|\W|_)`):            "${1}hour${2}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) tag(\z|\W|_)`):       "${1}in $2 day${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) tagen(\z|\W|_)`):     "${1}in $2 day${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) std(\z|\W|_)`):       "${1}in $2 hour${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) stunde(\z|\W|_)`):    "${1}in $2 hour${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) stunden(\z|\W|_)`):   "${1}in $2 hour${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) m(\z|\W|_)`):         "${1}in $2 minute${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) min(\z|\W|_)`):       "${1}in $2 minute${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) minute(\z|\W|_)`):    "${1}in $2 minute${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) minuten(\z|\W|_)`):   "${1}in $2 minute${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) monat(\z|\W|_)`):     "${1}in $2 month${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) monaten(\z|\W|_)`):   "${1}in $2 month${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) s(\z|\W|_)`):         "${1}in $2 second${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) sek(\z|\W|_)`):       "${1}in $2 second${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) sekunde(\z|\W|_)`):   "${1}in $2 second${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) sekunden(\z|\W|_)`):  "${1}in $2 second${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) wo(\z|\W|_)`):        "${1}in $2 week${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) woche(\z|\W|_)`):     "${1}in $2 week${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) wochen(\z|\W|_)`):    "${1}in $2 week${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) jahr(\z|\W|_)`):      "${1}in $2 year${3}",
		regexp.MustCompile(`(\A|\W|_)in (\d+) jahren(\z|\W|_)`):    "${1}in $2 year${3}",
		regexp.MustCompile(`(\A|\W|_)morgen(\z|\W|_)`):             "${1}in 1 day${2}",
		regexp.MustCompile(`(\A|\W|_)nächsten monat(\z|\W|_)`):     "${1}in 1 month${2}",
		regexp.MustCompile(`(\A|\W|_)nächste woche(\z|\W|_)`):      "${1}in 1 week${2}",
		regexp.MustCompile(`(\A|\W|_)nächstes jahr(\z|\W|_)`):      "${1}in 1 year${2}",
		regexp.MustCompile(`(\A|\W|_)übermorgen(\z|\W|_)`):         "${1}in 2 day${2}",
		regexp.MustCompile(`(\A|\W|_)im(\z|\W|_)`):                 "${1}in${2}",
		regexp.MustCompile(`(\A|\W|_)in(\z|\W|_)`):                 "${1}in${2}",
		regexp.MustCompile(`(\A|\W|_)jan(\z|\W|_)`):                "${1}january${2}",
		regexp.MustCompile(`(\A|\W|_)januar(\z|\W|_)`):             "${1}january${2}",
		regexp.MustCompile(`(\A|\W|_)jänner(\z|\W|_)`):             "${1}january${2}",
		regexp.MustCompile(`(\A|\W|_)jul(\z|\W|_)`):                "${1}july${2}",
		regexp.MustCompile(`(\A|\W|_)juli(\z|\W|_)`):               "${1}july${2}",
		regexp.MustCompile(`(\A|\W|_)jun(\z|\W|_)`):                "${1}june${2}",
		regexp.MustCompile(`(\A|\W|_)juni(\z|\W|_)`):               "${1}june${2}",
		regexp.MustCompile(`(\A|\W|_)mrz(\z|\W|_)`):                "${1}march${2}",
		regexp.MustCompile(`(\A|\W|_)mär(\z|\W|_)`):                "${1}march${2}",
		regexp.MustCompile(`(\A|\W|_)märz(\z|\W|_)`):               "${1}march${2}",
		regexp.MustCompile(`(\A|\W|_)mai(\z|\W|_)`):                "${1}may${2}",
		regexp.MustCompile(`(\A|\W|_)minuten(\z|\W|_)`):            "${1}minute${2}",
		regexp.MustCompile(`(\A|\W|_)mo(\z|\W|_)`):                 "${1}monday${2}",
		regexp.MustCompile(`(\A|\W|_)mon(\z|\W|_)`):                "${1}monday${2}",
		regexp.MustCompile(`(\A|\W|_)montag(\z|\W|_)`):             "${1}monday${2}",
		regexp.MustCompile(`(\A|\W|_)m(\z|\W|_)`):                  "${1}month${2}",
		regexp.MustCompile(`(\A|\W|_)monat(\z|\W|_)`):              "${1}month${2}",
		regexp.MustCompile(`(\A|\W|_)monate(\z|\W|_)`):             "${1}month${2}",
		regexp.MustCompile(`(\A|\W|_)monaten(\z|\W|_)`):            "${1}month${2}",
		regexp.MustCompile(`(\A|\W|_)nov(\z|\W|_)`):                "${1}november${2}",
		regexp.MustCompile(`(\A|\W|_)november(\z|\W|_)`):           "${1}november${2}",
		regexp.MustCompile(`(\A|\W|_)okt(\z|\W|_)`):                "${1}october${2}",
		regexp.MustCompile(`(\A|\W|_)oktober(\z|\W|_)`):            "${1}october${2}",
		regexp.MustCompile(`(\A|\W|_)nachm(\z|\W|_)`):              "${1}pm${2}",
		regexp.MustCompile(`(\A|\W|_)sa(\z|\W|_)`):                 "${1}saturday${2}",
		regexp.MustCompile(`(\A|\W|_)sam(\z|\W|_)`):                "${1}saturday${2}",
		regexp.MustCompile(`(\A|\W|_)samstag(\z|\W|_)`):            "${1}saturday${2}",
		regexp.MustCompile(`(\A|\W|_)sek(\z|\W|_)`):                "${1}second${2}",
		regexp.MustCompile(`(\A|\W|_)sekunde(\z|\W|_)`):            "${1}second${2}",
		regexp.MustCompile(`(\A|\W|_)sekunden(\z|\W|_)`):           "${1}second${2}",
		regexp.MustCompile(`(\A|\W|_)sep(\z|\W|_)`):                "${1}september${2}",
		regexp.MustCompile(`(\A|\W|_)september(\z|\W|_)`):          "${1}september${2}",
		regexp.MustCompile(`(\A|\W|_)so(\z|\W|_)`):                 "${1}sunday${2}",
		regexp.MustCompile(`(\A|\W|_)son(\z|\W|_)`):                "${1}sunday${2}",
		regexp.MustCompile(`(\A|\W|_)sonntag(\z|\W|_)`):            "${1}sunday${2}",
		regexp.MustCompile(`(\A|\W|_)do(\z|\W|_)`):                 "${1}thursday${2}",
		regexp.MustCompile(`(\A|\W|_)don(\z|\W|_)`):                "${1}thursday${2}",
		regexp.MustCompile(`(\A|\W|_)donnerstag(\z|\W|_)`):         "${1}thursday${2}",
		regexp.MustCompile(`(\A|\W|_)di(\z|\W|_)`):                 "${1}tuesday${2}",
		regexp.MustCompile(`(\A|\W|_)die(\z|\W|_)`):                "${1}tuesday${2}",
		regexp.MustCompile(`(\A|\W|_)dienstag(\z|\W|_)`):           "${1}tuesday${2}",
		regexp.MustCompile(`(\A|\W|_)mi(\z|\W|_)`):                 "${1}wednesday${2}",
		regexp.MustCompile(`(\A|\W|_)mit(\z|\W|_)`):                "${1}wednesday${2}",
		regexp.MustCompile(`(\A|\W|_)mittwoch(\z|\W|_)`):           "${1}wednesday${2}",
		regexp.MustCompile(`(\A|\W|_)w(\z|\W|_)`):                  "${1}week${2}",
		regexp.MustCompile(`(\A|\W|_)woche(\z|\W|_)`):              "${1}week${2}",
		regexp.MustCompile(`(\A|\W|_)wochen(\z|\W|_)`):             "${1}week${2}",
		regexp.MustCompile(`(\A|\W|_)j(\z|\W|_)`):                  "${1}year${2}",
		regexp.MustCompile(`(\A|\W|_)jahr(\z|\W|_)`):               "${1}year${2}",
		regexp.MustCompile(`(\A|\W|_)jahre(\z|\W|_)`):              "${1}year${2}",
		regexp.MustCompile(`(\A|\W|_)jahren(\z|\W|_)`):             "${1}year${2}",
	},
}

var de_AT_Locale = LocaleData{
	Name:      "de-AT",
	Parent:    &de_Locale,
	DateOrder: "DMY",
	Translations: map[*regexp.Regexp]string{
		regexp.MustCompile(`(\A|\W|_)jän(\z|\W|_)`): "${1}january${2}",
	},
}

var de_BE_Locale = LocaleData{
	Name:      "de-BE",
	Parent:    &de_Locale,
	DateOrder: "DMY",
}

var de_CH_Locale = LocaleData{
	Name:      "de-CH",
	Parent:    &de_Locale,
	DateOrder: "DMY",
}

var de_IT_Locale = LocaleData{
	Name:      "de-IT",
	Parent:    &de_Locale,
	DateOrder: "DMY",
	Translations: map[*regexp.Regexp]string{
		regexp.MustCompile(`(\A|\W|_)jän(\z|\W|_)`): "${1}january${2}",
	},
}

var de_LI_Locale = LocaleData{
	Name:      "de-LI",
	Parent:    &de_Locale,
	DateOrder: "DMY",
}

var de_LU_Locale = LocaleData{
	Name:      "de-LU",
	Parent:    &de_Locale,
	DateOrder: "DMY",
}
