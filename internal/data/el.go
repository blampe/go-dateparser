// Code is generated by script; DO NOT EDIT.

package data

import "regexp"

var elLocale = LocaleData{
	Name:                  "el",
	DateOrder:             "DMY",
	January:               []string{"ιαν", "ιανουάριος", "ιανουαρίου"},
	February:              []string{"φεβ", "φεβρουάριος", "φεβρουαρίου"},
	March:                 []string{"μάρ", "μάρτιος", "μαρ", "μαρτίου"},
	April:                 []string{"απρ", "απρίλιος", "απριλίου"},
	May:                   []string{"μάι", "μάιος", "μαΐ", "μαΐου"},
	June:                  []string{"ιουν", "ιουνίου", "ιούν", "ιούνιος"},
	July:                  []string{"ιουλ", "ιουλίου", "ιούλ", "ιούλιος"},
	August:                []string{"αυγ", "αυγούστου", "αύγ", "αύγουστος"},
	September:             []string{"σεπ", "σεπτέμβριος", "σεπτεμβρίου"},
	October:               []string{"οκτ", "οκτωβρίου", "οκτώβριος"},
	November:              []string{"νοέ", "νοέμβριος", "νοε", "νοεμβρίου"},
	December:              []string{"δεκ", "δεκέμβριος", "δεκεμβρίου"},
	Monday:                []string{"δευ", "δευτέρα"},
	Tuesday:               []string{"τρί", "τρίτη"},
	Wednesday:             []string{"τετ", "τετάρτη"},
	Thursday:              []string{"πέμ", "πέμπτη"},
	Friday:                []string{"παρ", "παρασκευή"},
	Saturday:              []string{"σάβ", "σάββατο"},
	Sunday:                []string{"κυρ", "κυριακή"},
	AM:                    []string{"πμ"},
	PM:                    []string{"μμ"},
	Year:                  []string{"έτ", "έτος"},
	Month:                 []string{"μήν", "μήνας"},
	Week:                  []string{"εβδ", "εβδομάδα"},
	Day:                   []string{"ημέρα"},
	Hour:                  []string{"ώ", "ώρ", "ώρα"},
	Minute:                []string{"λ", "λεπ", "λεπτό"},
	Second:                []string{"δ", "δευτ", "δευτερόλεπτο"},
	RelativeType: map[string][]string{
		`0 day ago`:    {`σήμερα`},
		`0 hour ago`:   {`αυτήν την ώρα`},
		`0 minute ago`: {`αυτό το λεπτό`},
		`0 month ago`:  {`τρέχων μήνας`},
		`0 second ago`: {`τώρα`},
		`0 week ago`:   {`αυτήν την εβδομάδα`},
		`0 year ago`:   {`φέτος`},
		`1 day ago`:    {`χθες`},
		`1 month ago`:  {`προηγούμενος μήνας`},
		`1 week ago`:   {`προηγούμενη εβδομάδα`},
		`1 year ago`:   {`πέρσι`},
		`in 1 day`:     {`αύριο`},
		`in 1 month`:   {`επόμενος μήνας`},
		`in 1 week`:    {`επόμενη εβδομάδα`},
		`in 1 year`:    {`επόμενο έτος`},
	},
	RelativeTypeRegex: map[string][]*regexp.Regexp{
		`\1 day ago`: {
			regexp.MustCompile(`(?i)(\d+) ημ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) ημέρα`),
			regexp.MustCompile(`(?i)πριν από (\d+) ημέρες`),
		},
		`\1 hour ago`: {
			regexp.MustCompile(`(?i)(\d+) ώ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) ώρ`),
			regexp.MustCompile(`(?i)πριν από (\d+) ώρα`),
			regexp.MustCompile(`(?i)πριν από (\d+) ώρες`),
		},
		`\1 minute ago`: {
			regexp.MustCompile(`(?i)(\d+) λ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) λεπ`),
			regexp.MustCompile(`(?i)πριν από (\d+) λεπτά`),
			regexp.MustCompile(`(?i)πριν από (\d+) λεπτό`),
		},
		`\1 month ago`: {
			regexp.MustCompile(`(?i)(\d+) μ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) μήνα`),
			regexp.MustCompile(`(?i)πριν από (\d+) μήνες`),
		},
		`\1 second ago`: {
			regexp.MustCompile(`(?i)(\d+) δ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) δευτ`),
			regexp.MustCompile(`(?i)πριν από (\d+) δευτερόλεπτα`),
			regexp.MustCompile(`(?i)πριν από (\d+) δευτερόλεπτο`),
		},
		`\1 week ago`: {
			regexp.MustCompile(`(?i)(\d+) εβδ πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) εβδ`),
			regexp.MustCompile(`(?i)πριν από (\d+) εβδομάδα`),
			regexp.MustCompile(`(?i)πριν από (\d+) εβδομάδες`),
		},
		`\1 year ago`: {
			regexp.MustCompile(`(?i)(\d+) έτη πριν`),
			regexp.MustCompile(`(?i)(\d+) έτος πριν`),
			regexp.MustCompile(`(?i)πριν από (\d+) έτη`),
			regexp.MustCompile(`(?i)πριν από (\d+) έτος`),
		},
		`in \1 day`: {
			regexp.MustCompile(`(?i)σε (\d+) ημ`),
			regexp.MustCompile(`(?i)σε (\d+) ημέρα`),
			regexp.MustCompile(`(?i)σε (\d+) ημέρες`),
		},
		`in \1 hour`: {
			regexp.MustCompile(`(?i)σε (\d+) ώ`),
			regexp.MustCompile(`(?i)σε (\d+) ώρ`),
			regexp.MustCompile(`(?i)σε (\d+) ώρα`),
			regexp.MustCompile(`(?i)σε (\d+) ώρες`),
		},
		`in \1 minute`: {
			regexp.MustCompile(`(?i)σε (\d+) λ`),
			regexp.MustCompile(`(?i)σε (\d+) λεπ`),
			regexp.MustCompile(`(?i)σε (\d+) λεπτά`),
			regexp.MustCompile(`(?i)σε (\d+) λεπτό`),
		},
		`in \1 month`: {
			regexp.MustCompile(`(?i)σε (\d+) μ`),
			regexp.MustCompile(`(?i)σε (\d+) μήνα`),
			regexp.MustCompile(`(?i)σε (\d+) μήνες`),
		},
		`in \1 second`: {
			regexp.MustCompile(`(?i)σε (\d+) δ`),
			regexp.MustCompile(`(?i)σε (\d+) δευτ`),
			regexp.MustCompile(`(?i)σε (\d+) δευτερόλεπτα`),
			regexp.MustCompile(`(?i)σε (\d+) δευτερόλεπτο`),
		},
		`in \1 week`: {
			regexp.MustCompile(`(?i)σε (\d+) εβδ`),
			regexp.MustCompile(`(?i)σε (\d+) εβδομάδα`),
			regexp.MustCompile(`(?i)σε (\d+) εβδομάδες`),
		},
		`in \1 year`: {
			regexp.MustCompile(`(?i)σε (\d+) έτη`),
			regexp.MustCompile(`(?i)σε (\d+) έτος`),
		},
	},
	LocaleSpecific: map[string]LocaleData{
		"el-CY": elCYLocale,
	},
}

var elCYLocale = LocaleData{
	Name:                  "el-CY",
	DateOrder:             "",
}
